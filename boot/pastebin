[org 0x7c00]
KERNEL_OFFSET equ 0x1000 ; The same one we used when linking the kernel

    mov [BOOT_DRIVE], dl ; Remember that the BIOS sets us the boot drive in 'dl' on boot
    mov bp, 0x9000
    mov sp, bp

    mov bx, MSG_REAL_MODE 
    call print
    call print_nl

    call load_kernel ; read the kernel from disk
    call switch_to_pm ; disable interrupts, load GDT,  etc. Finally jumps to 'BEGIN_PM'
    jmp $ ; Never executed

%include "print.asm"
%include "print_hex.asm"
%include "disk_read.asm"
%include "GDT.asm"
%include "print_32.asm"
%include "switch_to_32.asm"

[bits 16]
load_kernel:
    mov bx, MSG_LOAD_KERNEL
    call print
    call print_nl

    mov bx, KERNEL_OFFSET ; Read from disk and store in 0x1000
    mov dh, 16
    mov dl, [BOOT_DRIVE]
    call disk_load
    ret

[bits 32]
BEGIN_PM:
    mov ebx, MSG_PROT_MODE
    call print_string_pm
    call KERNEL_OFFSET ; Give control to the kernel
    jmp $ ; Stay here when the kernel returns control to us (if ever)


BOOT_DRIVE db 0 ; It is a good idea to store it in memory because 'dl' may get overwritten
MSG_REAL_MODE db "Started in 16-bit Real Mode", 0
MSG_PROT_MODE db "Landed in 32-bit Protected Mode", 0
MSG_LOAD_KERNEL db "Loading kernel into memory", 0

; padding
times 510 - ($-$$) db 0
dw 0xaa55
; load dh sectors from drive dl into ES:BX
%ifndef DISK_READ_ASM
	%define DISK_READ_ASM
		disk_load:
			pusha
			; reading from the disk requires setting specific values in all registers
			; so overwrite our input paramters from dx to the stack
			push dx 
			
			mov ah, 0x02 ; ah is a int 0x13 functio 0x02 = read
			mov al, dh ; al is the number of sectors to read (0x01 to 0x80)
			mov cl, 0x02 ; cl is sector 0x01 to 0x11
			
			mov ch, 0x00 ; ch cylinder 
			; dl is automatically set to the drive number by the BIOS
			mov dh, 0x00 ; dh is the head number of the drive 
			
			;[es:bx] <- pointer to buffer where the data will be stored
			; caller sets it up for us and is the standard location for int 0x13
			int 0x13 ; BIOS interrupt
			jc disk_error ; if error (stored in the carry bit)
			
			pop dx
			cmp al, dh ; BIOS also sets al to he # of sectors read
			jne sectors_error
			popa 
			ret

		disk_error:
			mov bx, DISK_ERROR
			call print
			call print_nl
			mov dh, ah ; ah = error code, dl =  disk drive that dropped the error
			call print_hex ; the codes are here: http://stanislavs.org/helppc/int_13-1.html
			jmp disk_loop

		sectors_error:
			mov bx, SECTORS_ERROR
			call print

		disk_loop:
			jmp $

		DISK_ERROR:
			db "Disk read error", 0
		SECTORS_ERROR:
			db "Incorrect numbers of sectors read", 0
%endif
; thiis is the global discriptor table
; basically a 32 bit realmode memory segment data structure
; https://wiki.osdev.org/GDT_Tutorial#What_should_I_put_in_my_GDT.3F
%ifndef GDT_ASM
	%define GDT_ASM
		gdt_start: ; don't remove the labels, they're needed to compute sizes and jumps
			; the GDT starts with a null 8-byte
			dd 0x0 ; 4 byte
			dd 0x0 ; 4 byte

		; GDT for code segment. base = 0x00000000, length = 0xfffff
		; for flags, refer to os-dev.pdf document, page 36
		gdt_code: 
			dw 0xffff    ; segment length, bits 0-15
			dw 0x0       ; segment base, bits 0-15
			db 0x0       ; segment base, bits 16-23
			db 10011010b ; flags (8 bits)
			db 11001111b ; flags (4 bits) + segment length, bits 16-19
			db 0x0       ; segment base, bits 24-31

		; GDT for data segment. base and length identical to code segment
		; some flags changed, again, refer to os-dev.pdf
		gdt_data:
			dw 0xffff
			dw 0x0
			db 0x0
			db 10010010b
			db 11001111b
			db 0x0

		gdt_end:

		; GDT descriptor
		gdt_descriptor:
			dw gdt_end - gdt_start - 1 ; size (16 bit), always one less of its true size
			dd gdt_start ; address (32 bit)

		; define some constants for later use
		CODE_SEG equ gdt_code - gdt_start
		DATA_SEG equ gdt_data - gdt_start
%endif
bootsect.bin: bootsect.asm 
	nasm $^ -f bin -o $@

kernel_entry.o: kernel_entry.asm
	nasm $^ -f elf -o $@ 
; this program uses 32 bit real mode, it writes directly to the video memory that starts at 0xb8000
; there are then routines that are able to print chars on the screen from 0xb8000
%ifndef PRINT_32_ASM
	%define PRINT_32_ASM 
		[bits 32]

		; constants being defined 
		VIDEO_MEMORY equ 0xb8000
		WHITE_ON_BLACK equ 0x0f ; the color byte for each char 

		print_string_pm:
			pusha
			mov edx, VIDEO_MEMORY

		print_string_pm_loop:
			mov al, [ebx] ; ebx is the address of our character 
			mov ah, WHITE_ON_BLACK

			cmp al, 0 ; check if we are at the end of a string 
			je print_string_pm_done

			mov [edx], ax ; store character + attribute in video memory
			add ebx, 1 ; next char 
			add edx, 2 ; next video memory position

			jmp print_string_pm_loop


		print_string_pm_done:
			popa 
			ret
%endif
; this is going to be the basic print subroutine for the bootsector
; it also demonstrates how functions and strings work in assembly
; use:
; mov bx, what_you_want_to_print
; call print
%ifndef PRINT_ASM
	%define PRINT_ASM
		print:
			pusha ; saves the current state of the registers


		; while (string[i] != 0) {print string[i]; i++}
		start:
			mov al, [bx] ; bx is the base address for the string
			; if al is 0, jump to done
			cmp al, 0
			je done 

			; print with BIOS help
			mov ah, 0x0e
			int 0x10
			
			; increment pointer and start next loop
			add bx, 1
			jmp start

		done:
			popa ; restore register states
			ret ; return to the address called from

		;prints a newline character
		print_nl:
			pusha 
			
			mov ah, 0x0e
			mov al, 0x0a ; newline char
			int 0x10
			mov al, 0x0d ; carriage return 
			int 0x10

			popa 
			ret
%endif 
; recieving data from dx
%ifndef PRINT_HEX_ASM
	%define PRINT_HEX_ASM
		print_hex:
			pusha ; push current register state to the stack
			
			mov cx, 0 ; the index variable
			
			jmp hex_loop

		hex_loop: ; actually prinst out the hex

		; Strategy: get the last char of 'dx', then convert to ASCII
		; Numeric ASCII values: '0' (ASCII 0x30) to '9' (0x39), so just add 0x30 to byte N.
		; For alphabetic characters A-F: 'A' (ASCII 0x41) to 'F' (0x46) we'll add 0x40
		; Then, move the ASCII byte to the correct position on the resulting string

			cmp cx, 4
			je end
			
			;1. convert last char of dx to ASCII
			mov ax, dx ; use ax as our working register
			and ax, 0x000f ; masks the first three to zeros
			add al, 0x30 ; add 0x30 to convert N to "N"
			cmp al, 0x39 ; if > 9, add extra 8 to represent 'A' to 'F'
			jle step2
			add al, 7 ; 'A' is ASCII 65 instead of 58, so 65-58 = 7

		step2:
			; 2. get the correct position in the string to put our ASCII char
			; bx <-- base address + string length - index of char
			mov bx, HEX_OUT + 5 ; base + length
			sub bx, cx ; our index string 
			mov [bx], al ; copy the ASCII char on al to the position pointed to by bx 
			ror dx, 4 ; shifts the

			add cx, 1 
			jmp hex_loop

		end:
			; prepare the parameter and prepare to call the function
			; remember that print recieves the parameter in bx
			mov bx, HEX_OUT
			call print
			ret

		HEX_OUT:
			db '0x0000', 0 ; reserve space for the hex for our new string
%endif
%ifndef SWITCH_TO_32_ASM
	%define SWITCH_TO_32_ASM
		[bits 16]
		switch_to_pm: ; switch to protected mode
			cli ; 1. disable interrupts 
			lgdt [gdt_descriptor] ; 2. load GDT descriptor
			mov eax, cr0
			or eax, 0x1 ; 3. set 32bit mode bit in cr0
			mov cr0, eax
			jmp CODE_SEG:init_pm ; 4. far jump using a different segment

		[bits 32]
		init_pm: ; now using 32bit instructions
			mov ax, DATA_SEG ; 5. update the segment registers
			mov ds, ax
			mov ss, ax
			mov es, ax
			mov fs, ax
			mov gs, ax
			
			mov ebp, 0x90000 ; 6. update the stack right at the top of the free space
			mov esp, ebp	
			call BEGIN_PM ; 7. call a well known label with useful code
%endif
